import { {{nameModule}}Repository } from "@domain-repositories/{{nameSecondModule}}/{{nameSecondModule}}.repository";
import { Injectable, NotFoundException } from "@nestjs/common";
import { {{nameModule}}Mapper } from "../../mapper/{{nameSecondModule}}/{{nameSecondModule}}.mapper";
import { FilterInterface } from "@core-interfaces/filter/filter.interface";
import { HttpResponseInterface } from "@core-interfaces/http/http-response.interface";
import { {{nameModule}}CreateDto, {{nameModule}}Entity } from "@domain-entities/{{nameSecondModule}}/{{nameSecondModule}}.entity";
import { constructQuery } from "@core-helpers/query/queries.helper";
import { InjectRepository } from "@mikro-orm/nestjs";
import { EntityManager, EntityRepository } from "@mikro-orm/core";
import { BcryptService } from "@core-services/bcrypt/bcryp.service";
import { JwtService } from "@nestjs/jwt";
import { MikroQueryService } from "@core-services/mikro/mikro-queries.service";

@Injectable()
export class {{nameModule}}Implementation implements {{nameModule}}Repository {


  private mapper = new {{nameModule}}Mapper();

  constructor(
    private jwtService: JwtService,
    @InjectRepository({{nameModule}}Entity) private readonly repository: EntityRepository<{{nameModule}}Entity>,
    private readonly em: EntityManager,
    private bcryptService: BcryptService,
    private mikroQueryService: MikroQueryService
  ) {
  }

  public async getAll(filter: FilterInterface, page?: number | null): Promise<HttpResponseInterface<{{nameModule}}Entity>> {
    if (!filter) {
          return {
            data: await this.repository.find({}, { populate: [] })
          };
        } else {
          return await this.mikroQueryService.constructResponseWithFilter<{{nameModule}}Entity>(this.repository, filter, page);
        }
  }

  public async create(data: {{nameModule}}CreateDto): Promise<{ data: {{nameModule}}Entity }> {

    const newObject = this.repository.create(data);
    await this.repository.insert(newObject);

    return {
      data: newObject
    };
  }

  public async updateOne(id: string, data: {{nameModule}}Entity): Promise<{ data: {{nameModule}}Entity }> {
      const register = await this.repository.findOne({ id: Number(id) });
      if (!register) {
        throw new Error("{{nameModule}} not found");
      } else {
        // @ts-ignore
        this.repository.assign(register, data);
        await this.em.flush();
        return {
          data: register
        };
      }
    }

  public async deleteOne(id: string): Promise<{ data: {{nameModule}}Entity }> {

    const object = await this.repository.findOne(Number(id));

    if (!object) {
      throw new NotFoundException(`{{nameModule}} with id ${id} not found`);
    }
    await this.repository.nativeDelete(object);

    return {
      data: object
    };

  }

}
