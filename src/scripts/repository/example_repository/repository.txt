import {{{nameModule}}Entity, {{nameModule}}CreateDto} from "../../entities/{{namePrincipalModule}}/{{nameSecondModule}}.entity";
import { BaseHttpModel } from "@core-interfaces/http/base-response.interface";
import { FilterInterface } from "@core-interfaces/filter/filter.interface";
import { HttpResponseInterface } from "@core-interfaces/http/http-response.interface";

export abstract class {{nameModule}}Repository implements BaseHttpModel<{{nameModule}}Entity> {

  abstract getAll?(filter: FilterInterface, page?: number): Promise<HttpResponseInterface<{{nameModule}}Entity>>;

  abstract getOne?(filter: FilterInterface): Promise<{ data: {{nameModule}}Entity }>;

  abstract create?(data: {{nameModule}}CreateDto): Promise<{ data : {{nameModule}}Entity}>;

  abstract updateOne?(id: string, data: {{nameModule}}Entity): Promise<{ data : {{nameModule}}Entity}>;

  abstract deleteOne?(id: string): Promise<{ data : {{nameModule}}Entity}>;

}
